/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * StoreApi-@@API-SUFFIX
 * Store Api
 *
 * OpenAPI spec version: 1.0.0
 * Contact: yury@mood-me.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";
import { API_URL } from '../config';
const BASE_PATH = API_URL.replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    override name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CheckLicenseInput
 */
export interface CheckLicenseInput {
    /**
     * 
     * @type {number}
     * @memberof CheckLicenseInput
     */
    protocolVersion: number;
    /**
     * 
     * @type {string}
     * @memberof CheckLicenseInput
     */
    productName: string;
    /**
     * 
     * @type {string}
     * @memberof CheckLicenseInput
     */
    appID: string;
    /**
     * 
     * @type {Platform}
     * @memberof CheckLicenseInput
     */
    platform: Platform;
    /**
     * 
     * @type {string}
     * @memberof CheckLicenseInput
     */
    license: string;
    /**
     * 
     * @type {number}
     * @memberof CheckLicenseInput
     */
    datetime: number;
}
/**
 * 
 * @export
 * @interface CreateLicenseInput
 */
export interface CreateLicenseInput {
    /**
     * 
     * @type {ID}
     * @memberof CreateLicenseInput
     */
    productID: ID;
    /**
     * 
     * @type {string}
     * @memberof CreateLicenseInput
     */
    appID: string;
    /**
     * 
     * @type {ID}
     * @memberof CreateLicenseInput
     */
    customerID: ID;
    /**
     * 
     * @type {number}
     * @memberof CreateLicenseInput
     */
    expiresAt?: number;
}
/**
 * 
 * @export
 * @interface GetLicensesResponse
 */
export interface GetLicensesResponse {
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponse
     */
    currentPage: number;
    /**
     * 
     * @type {number}
     * @memberof GetLicensesResponse
     */
    totalPages: number;
    /**
     * 
     * @type {Array<LicenseInfo>}
     * @memberof GetLicensesResponse
     */
    items: Array<LicenseInfo>;
}
/**
 * 
 * @export
 */
export type ID = number | string
/**
 * 
 * @export
 * @interface LicenseInfo
 */
export interface LicenseInfo {
    /**
     * 
     * @type {ID}
     * @memberof LicenseInfo
     */
    ID: ID;
    /**
     * 
     * @type {ID}
     * @memberof LicenseInfo
     */
    productID: ID;
    /**
     * 
     * @type {string}
     * @memberof LicenseInfo
     */
    appID: string;
    /**
     * 
     * @type {Platform}
     * @memberof LicenseInfo
     */
    platform: Platform;
    /**
     * 
     * @type {number}
     * @memberof LicenseInfo
     */
    createdAt: number;
    /**
     * 
     * @type {number}
     * @memberof LicenseInfo
     */
    expiresAt?: number;
    /**
     * 
     * @type {string}
     * @memberof LicenseInfo
     */
    license: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum Platform {
    Web = <any> 'web',
    Ios = <any> 'ios',
    Android = <any> 'android',
    Osx = <any> 'osx',
    Windows = <any> 'windows'
}
/**
 * CORSApi - fetch parameter creator
 * @export
 */
export const CORSApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOptions(options: any = {}): FetchArgs {
            const localVarPath = `/check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {ID} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseIdOptions(id: ID, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling licenseIdOptions.');
            }
            const localVarPath = `/license/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseOptions(options: any = {}): FetchArgs {
            const localVarPath = `/license`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentStripeHandlerOptions(options: any = {}): FetchArgs {
            const localVarPath = `/payment/stripe/handler`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CORSApi - functional programming interface
 * @export
 */
export const CORSApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOptions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CORSApiFetchParamCreator(configuration).checkOptions(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {ID} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseIdOptions(id: ID, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CORSApiFetchParamCreator(configuration).licenseIdOptions(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseOptions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CORSApiFetchParamCreator(configuration).licenseOptions(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentStripeHandlerOptions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CORSApiFetchParamCreator(configuration).paymentStripeHandlerOptions(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CORSApi - factory interface
 * @export
 */
export const CORSApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOptions(options?: any) {
            return CORSApiFp(configuration).checkOptions(options)(fetch, basePath);
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {ID} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseIdOptions(id: ID, options?: any) {
            return CORSApiFp(configuration).licenseIdOptions(id, options)(fetch, basePath);
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseOptions(options?: any) {
            return CORSApiFp(configuration).licenseOptions(options)(fetch, basePath);
        },
        /**
         * Enable CORS by returning correct headers 
         * @summary CORS support
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentStripeHandlerOptions(options?: any) {
            return CORSApiFp(configuration).paymentStripeHandlerOptions(options)(fetch, basePath);
        },
    };
};

/**
 * CORSApi - object-oriented interface
 * @export
 * @class CORSApi
 * @extends {BaseAPI}
 */
export class CORSApi extends BaseAPI {
    /**
     * Enable CORS by returning correct headers 
     * @summary CORS support
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORSApi
     */
    public checkOptions(options?: any) {
        return CORSApiFp(this.configuration).checkOptions(options)(this.fetch, this.basePath);
    }

    /**
     * Enable CORS by returning correct headers 
     * @summary CORS support
     * @param {ID} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORSApi
     */
    public licenseIdOptions(id: ID, options?: any) {
        return CORSApiFp(this.configuration).licenseIdOptions(id, options)(this.fetch, this.basePath);
    }

    /**
     * Enable CORS by returning correct headers 
     * @summary CORS support
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORSApi
     */
    public licenseOptions(options?: any) {
        return CORSApiFp(this.configuration).licenseOptions(options)(this.fetch, this.basePath);
    }

    /**
     * Enable CORS by returning correct headers 
     * @summary CORS support
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CORSApi
     */
    public paymentStripeHandlerOptions(options?: any) {
        return CORSApiFp(this.configuration).paymentStripeHandlerOptions(options)(this.fetch, this.basePath);
    }

}
/**
 * LicensingApi - fetch parameter creator
 * @export
 */
export const LicensingApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check License
         * @param {CheckLicenseInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLicense(body: CheckLicenseInput, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling checkLicense.');
            }
            const localVarPath = `/check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CheckLicenseInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create License
         * @param {CreateLicenseInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLicense(body: CreateLicenseInput, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createLicense.');
            }
            const localVarPath = `/license`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cognito required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateLicenseInput" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete license by license id
         * @param {ID} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLicense(id: ID, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteLicense.');
            }
            const localVarPath = `/license/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cognito required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get licenses
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseList(page?: number, size?: number, options: any = {}): FetchArgs {
            const localVarPath = `/license`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cognito required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LicensingApi - functional programming interface
 * @export
 */
export const LicensingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check License
         * @param {CheckLicenseInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLicense(body: CheckLicenseInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LicensingApiFetchParamCreator(configuration).checkLicense(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create License
         * @param {CreateLicenseInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLicense(body: CreateLicenseInput, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LicenseInfo> {
            const localVarFetchArgs = LicensingApiFetchParamCreator(configuration).createLicense(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete license by license id
         * @param {ID} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLicense(id: ID, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = LicensingApiFetchParamCreator(configuration).deleteLicense(id, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get licenses
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseList(page?: number, size?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<GetLicensesResponse> {
            const localVarFetchArgs = LicensingApiFetchParamCreator(configuration).licenseList(page, size, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LicensingApi - factory interface
 * @export
 */
export const LicensingApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Check License
         * @param {CheckLicenseInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLicense(body: CheckLicenseInput, options?: any) {
            return LicensingApiFp(configuration).checkLicense(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create License
         * @param {CreateLicenseInput} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLicense(body: CreateLicenseInput, options?: any) {
            return LicensingApiFp(configuration).createLicense(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete license by license id
         * @param {ID} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLicense(id: ID, options?: any) {
            return LicensingApiFp(configuration).deleteLicense(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get licenses
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        licenseList(page?: number, size?: number, options?: any) {
            return LicensingApiFp(configuration).licenseList(page, size, options)(fetch, basePath);
        },
    };
};

/**
 * LicensingApi - object-oriented interface
 * @export
 * @class LicensingApi
 * @extends {BaseAPI}
 */
export class LicensingApi extends BaseAPI {
    /**
     * 
     * @summary Check License
     * @param {CheckLicenseInput} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensingApi
     */
    public checkLicense(body: CheckLicenseInput, options?: any) {
        return LicensingApiFp(this.configuration).checkLicense(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create License
     * @param {CreateLicenseInput} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensingApi
     */
    public createLicense(body: CreateLicenseInput, options?: any) {
        return LicensingApiFp(this.configuration).createLicense(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete license by license id
     * @param {ID} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensingApi
     */
    public deleteLicense(id: ID, options?: any) {
        return LicensingApiFp(this.configuration).deleteLicense(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get licenses
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LicensingApi
     */
    public licenseList(page?: number, size?: number, options?: any) {
        return LicensingApiFp(this.configuration).licenseList(page, size, options)(this.fetch, this.basePath);
    }

}
/**
 * PaymentApi - fetch parameter creator
 * @export
 */
export const PaymentApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Stripe customer portal
         * @param {string} customerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeCustomerPortal(customerID: string, options: any = {}): FetchArgs {
            // verify required parameter 'customerID' is not null or undefined
            if (customerID === null || customerID === undefined) {
                throw new RequiredError('customerID','Required parameter customerID was null or undefined when calling createStripeCustomerPortal.');
            }
            const localVarPath = `/payment/stripe/customer_portal`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (customerID !== undefined) {
                localVarQueryParameter['customerID'] = customerID;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Stripe session
         * @param {string} priceID 
         * @param {string} bundleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeSession(priceID: string, bundleID: string, options: any = {}): FetchArgs {
            // verify required parameter 'priceID' is not null or undefined
            if (priceID === null || priceID === undefined) {
                throw new RequiredError('priceID','Required parameter priceID was null or undefined when calling createStripeSession.');
            }
            // verify required parameter 'bundleID' is not null or undefined
            if (bundleID === null || bundleID === undefined) {
                throw new RequiredError('bundleID','Required parameter bundleID was null or undefined when calling createStripeSession.');
            }
            const localVarPath = `/payment/stripe/session`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (priceID !== undefined) {
                localVarQueryParameter['priceID'] = priceID;
            }

            if (bundleID !== undefined) {
                localVarQueryParameter['bundleID'] = bundleID;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stripe handler
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeHandler(body: any, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling stripeHandler.');
            }
            const localVarPath = `/payment/stripe/handler`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"any" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Stripe customer portal
         * @param {string} customerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeCustomerPortal(customerID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = PaymentApiFetchParamCreator(configuration).createStripeCustomerPortal(customerID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create Stripe session
         * @param {string} priceID 
         * @param {string} bundleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeSession(priceID: string, bundleID: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = PaymentApiFetchParamCreator(configuration).createStripeSession(priceID, bundleID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Stripe handler
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeHandler(body: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PaymentApiFetchParamCreator(configuration).stripeHandler(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Stripe customer portal
         * @param {string} customerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeCustomerPortal(customerID: string, options?: any) {
            return PaymentApiFp(configuration).createStripeCustomerPortal(customerID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create Stripe session
         * @param {string} priceID 
         * @param {string} bundleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeSession(priceID: string, bundleID: string, options?: any) {
            return PaymentApiFp(configuration).createStripeSession(priceID, bundleID, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Stripe handler
         * @param {any} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stripeHandler(body: any, options?: any) {
            return PaymentApiFp(configuration).stripeHandler(body, options)(fetch, basePath);
        },
    };
};

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * 
     * @summary Stripe customer portal
     * @param {string} customerID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public createStripeCustomerPortal(customerID: string, options?: any) {
        return PaymentApiFp(this.configuration).createStripeCustomerPortal(customerID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create Stripe session
     * @param {string} priceID 
     * @param {string} bundleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public createStripeSession(priceID: string, bundleID: string, options?: any) {
        return PaymentApiFp(this.configuration).createStripeSession(priceID, bundleID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Stripe handler
     * @param {any} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public stripeHandler(body: any, options?: any) {
        return PaymentApiFp(this.configuration).stripeHandler(body, options)(this.fetch, this.basePath);
    }

}
