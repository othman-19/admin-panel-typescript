/**
 * StoreApi-@@API-SUFFIX
 * Store Api
 *
 * OpenAPI spec version: 1.0.0
 * Contact: yury@mood-me.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("CORSApi", () => {
  let instance: api.CORSApi
  beforeEach(function() {
    instance = new api.CORSApi(config)
  });

  test("checkOptions", () => {
    return expect(instance.checkOptions({})).resolves.toBe(null)
  })
  test("licenseIdOptions", () => {
    const id: ID = undefined
    return expect(instance.licenseIdOptions(id, {})).resolves.toBe(null)
  })
  test("licenseOptions", () => {
    return expect(instance.licenseOptions({})).resolves.toBe(null)
  })
  test("paymentStripeHandlerOptions", () => {
    return expect(instance.paymentStripeHandlerOptions({})).resolves.toBe(null)
  })
})

describe("LicensingApi", () => {
  let instance: api.LicensingApi
  beforeEach(function() {
    instance = new api.LicensingApi(config)
  });

  test("checkLicense", () => {
    const body: api.CheckLicenseInput = undefined
    return expect(instance.checkLicense(body, {})).resolves.toBe(null)
  })
  test("createLicense", () => {
    const body: api.CreateLicenseInput = undefined
    return expect(instance.createLicense(body, {})).resolves.toBe(null)
  })
  test("deleteLicense", () => {
    const id: ID = undefined
    return expect(instance.deleteLicense(id, {})).resolves.toBe(null)
  })
  test("licenseList", () => {
    const page: number = 56
    const size: number = 56
    return expect(instance.licenseList(page, size, {})).resolves.toBe(null)
  })
})

describe("PaymentApi", () => {
  let instance: api.PaymentApi
  beforeEach(function() {
    instance = new api.PaymentApi(config)
  });

  test("createStripeCustomerPortal", () => {
    const customerID: string = "customerID_example"
    return expect(instance.createStripeCustomerPortal(customerID, {})).resolves.toBe(null)
  })
  test("createStripeSession", () => {
    const priceID: string = "priceID_example"
    const bundleID: string = "bundleID_example"
    return expect(instance.createStripeSession(priceID, bundleID, {})).resolves.toBe(null)
  })
  test("stripeHandler", () => {
    const body: api.any = undefined
    return expect(instance.stripeHandler(body, {})).resolves.toBe(null)
  })
})

